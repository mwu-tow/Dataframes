# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - "*"

jobs:
- job: Ubuntu
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - script: |
      pwd
    displayName: 'Build Linux'
- job: macOS
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - script: |
      brew update || brew upgrade
      brew install fmt cmake apache-arrow boost rapidjson howard-hinnant-date pcre pybind11 wget openssl
    displayName: Install C++ dependencies
  - script: |
      wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz
      tar xf Python-3.7.0.tar.xz
      cd Python-3.7.0
      ./configure --prefix ~/python-dist --enable-shared --with-openssl=$(brew --prefix openssl)
      make -j 2
      make install
      ~/python-dist/bin/python3.7 -mpip install --upgrade pip
      ~/python-dist/bin/python3.7 -mpip install numpy matplotlib seaborn sklearn
      cd .. &&\
      rm -rf Python-3.7.0.tar.xz Python-3.7.0
    displayName: Build Python
  - script: |
      cd ~
      git clone https://github.com/tfussell/xlnt.git
      cd xlnt
      mkdir build
      cd build
      cmake .. -DTESTS=OFF
      make -j 2
      make install
    displayName: Install XLNT library
  - script: pip3 install numpy seaborn sklearn
    displayName: Install Python dependencies
  - script: |
      brew install gmp # otherwise GHC 8.6 fails to install, see: https://ghc.haskell.org/trac/ghc/ticket/15404
      export PATH=$PATH:~/.local/bin
      curl -sSL https://get.haskellstack.org/ | sh
      export PYTHON_PREFIX_PATH=~/python-dist/
      export DATAFRAMES_REPO_PATH=$PWD
      cd scripts
      stack run
    displayName: Configure Dataframes CMake
- job: Windows
  pool:
    vmImage: vs2017-win2016
  steps:
  - script: |
      python -m pip install numpy==1.15.*
      curl -sS -o stack.zip -L --insecure https://get.haskellstack.org/stable/windows-x86_64.zip
      7z x stack.zip -y -oC:\stack stack.exe
      cd $(Build.SourcesDirectory)\scripts\
      stack run --cwd $(Build.SourcesDirectory)